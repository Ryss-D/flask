import os 

from flask import Flask, request, jsonify
from flask_smorest import Api
## package for json web token autentiction management
from flask_jwt_extended import JWTManager

from db import db
##its the same that use import.__init__
import models

from resources.item import blp as ItemBlueprint
from resources.store import blp as StoreBlueprint
from resources.tag import blp as TagBlueprint
from resources.user import blp as UserBlueprint

##Factory pattern

def create_app(db_url=None):


    #file name and variable name should always be app
    app = Flask(__name__)

    ##if any exceptions occurs inside3 a module
    ##it will propage to the app so we can seeit
    app.config["PROGATE_EXCPETIONS"]=True
    app.config["API_TITLE"] = "Stores REST API"
    app.config["API_VERSION"] = "v1"
    app.config["OPENAPI_VERSION"] = "3.0.3"
    app.config["OPENAPI_URL_PREFIX"] = "/"
    ##SWAGER  adds docmentation
    app.config["OPENAPI_SWAGGER_UI_PATH"] = "/swagger_ui"
    app.config["OPENAPI_SWAGGER_UI_URL"] = "https://cdn.jsdelivr.net/npm/swagger-ui-dist/"
    app.config["SQLALCHEMY_DATABASE_URI"] = db_url or os.getenv("DATABASE_URL", "sqlite:///data.db")
    app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False
    db.init_app(app)

    api = Api(app)

    ##this key is used to sigin the jwt
    ##sigin not encrypt it means that is used only for verify that the 
    ##jwt is created by the app
    app.config["JWT_SECRET_KEY"] = "jose"
    ## obviusly we recommend a little more secure key (ieg autogenerated or using a secret generator)
    ## and usualy it is saved on a enviroment variable
    jwt = JWTManager(app)

   ##JWT claims allowus to pass extra information other tan the user identification 
    @jwt.additional_claims_loader
    def add_claims_to_jwt(identity):
    ##this identity is the passed as argument when we created the token
        ##a better apporach to this would be
        ##lok in the data base and ssee wheter the user is an admin
        if identity == 1:
            return{"is_admin":True}
            ## the information is stored in the jwt
            ## and can be accesed as key value pair with jwt.get("key")
        return {"is_admin": False}

    @jwt.expired_token_loader
    def expired_token_callback(jwt_header, jwt_payload):
        return(
            jsonify({"message": "The token has expired.", "error": "token_expired"}),
            401,
        )

    @jwt.invalid_token_loader
    def invalid_token_callback(error):
        return(
            jsonify(
                {"message": "Siganture verification failed.", "error": "invalid_token"}
            ),
            401,
        )

    @jwt.unauthorized_loader
    def missin_token_callback(error):
        return(
            jsonify(
                {
                    "description": "Request does not contain an access token.",
                    "error": "autorization_required"
                }
            ),
            401,
        )

    @app.before_first_request
    def create_tables():
        db.create_all()

    api.register_blueprint(ItemBlueprint)
    api.register_blueprint(StoreBlueprint)
    api.register_blueprint(TagBlueprint)
    api.register_blueprint(UserBlueprint)


    return app